"""
Author: Md Mostafizur Rahman
File: Question number 2, 3, & 5

Input: Takes file name(s) as argument.
Output: Print appropriate message like "file not found", "not a JSON file", OR print the extracted output from NVD.py (def extract()) file.
Note: Also contains the intended extracted data and the query comand to create a table.

Run Command:  python3  nvd/scripts/nvd_extract.py --json_file null.txt nvdcve-1.1-2017.json
"""

import NVD
import argparse
import pprint
from typing import Dict

def nvd_extract(all_data_extract: Dict) -> None:
    pp = pprint.PrettyPrinter(depth=8)
    pp.pprint(all_data_extract)

    if "CVE_Items" in all_data_extract !=0:
        allDataListTuple = []
        for single_dict in all_data_extract["CVE_Items"]:
            ID= single_dict.get("cve", {}).get("CVE_data_meta", {}).get("ID", {})
            baseSeverity = single_dict.get("impact", {}).get("baseMetricV3", {}).get("cvssV3", {}).get("baseSeverity", {})
            publishedDate = single_dict.get("publishedDate", {})
            lastModifiedDate = single_dict.get("lastModifiedDate", {})
            dataTuple = tuple((ID, str(baseSeverity), publishedDate, lastModifiedDate))
            allDataListTuple.append(dataTuple)
    else:
        print("This is not the expected JSON file!")
        allDataListTuple = False
    query_create_table = "CREATE TABLE IF NOT EXISTS NVD_Data (ID VARCHAR(255) PRIMARY KEY, baseSeverity VARCHAR(255), publishedDate VARCHAR(255), lastModifiedDate VARCHAR(255))"
    return None


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Parameter for passing dataset information")
    parser.add_argument("--json_file", required=True, nargs="+", help="Enter the name of the JSON file")
    args = parser.parse_args()
    for file in args.json_file:
        extract_data = NVD.extract(file)
        if extract_data !=False:
            nvd_extract(extract_data)