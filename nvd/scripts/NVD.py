"""
Author: Md Mostafizur Rahman
File: Question Number 1, 4, 5, 6, 7 & Bonus Q-1
"""

import json
from pathlib import Path
from typing import Any, Dict, List, Tuple
import mysql.connector
import os

ROOT = Path(__file__).resolve().parent.parent
DATA = ROOT / "download"

# Takes extracted data and vendor data (coming from vuln2db.py file); create tables and save the records into the respective tables.
def save2db(data_records: List[Tuple], vendor_data_records: List[Tuple], connection: Any) -> None:
    cursor = connection.cursor()

    # Create table for the intended extracted data
    try:
        cursor.execute("CREATE TABLE IF NOT EXISTS NVD_Data (ID VARCHAR(255) PRIMARY KEY, baseSeverity VARCHAR(255), publishedDate VARCHAR(255), lastModifiedDate VARCHAR(255))")
        print("NVD_Data table created successfully OR Data table already exist!")
    except mysql.connector.Error as error:
        print("Failed to create table into the database {} ".format(error))

    # Insert intended extracted records into the table 
    try:
        sql_insert_query = """INSERT IGNORE INTO NVD_Data (ID, baseSeverity, publishedDate, lastModifiedDate) VALUES (%s, %s, %s,	%s)"""
        recods_to_insert = data_records
        cursor.executemany(sql_insert_query, recods_to_insert)
        connection.commit()
        print("Successfully insterted intended extracted data records into the table")
    except mysql.connector.Error as error:
        print("Failed to insert intended extracted data record into the table {} ".format(error))
    
    # Create table for the vendor information data
    try:
        cursor.execute("CREATE TABLE IF NOT EXISTS Vendor_Data (uniqueKey int Auto_Increment  PRIMARY KEY, ID VARCHAR(255), vendorName VARCHAR(255), productName VARCHAR(255), versionValue VARCHAR(255))")
        print("Vendor_Data table created successfully OR Data table already exists")
    except mysql.connector.Error as error:
        print("Failed to create table into the database {} ".format(error))

    # Insert records into the table 
    try:
        sql_insert_query_vendor_data = """INSERT IGNORE INTO Vendor_Data (ID, vendorName, productName, versionValue) VALUES (%s, %s, %s, %s)"""
        vendor_recods_to_insert = vendor_data_records
        cursor.executemany(sql_insert_query_vendor_data, vendor_recods_to_insert)
        connection.commit()
        print("Successfully insterted vendor records into the table")
    except mysql.connector.Error as error:
        print("Failed to insert record into the table {} ".format(error))

# Extract only intended information from the main JSON file data coming from vuln2db.py file
def nvd_extract_only_intended(all_data_extract: Dict) -> Tuple[List[Tuple], List[Tuple]]:
    if "CVE_Items" in all_data_extract !=0:
        allDataListTuple, allVendorDataListTuple = [], [] # Need list of tuples, so that we can use executemany() function
        for single_dict in all_data_extract["CVE_Items"]:
            ID= single_dict.get("cve", {}).get("CVE_data_meta", {}).get("ID", {})
            baseSeverity = single_dict.get("impact", {}).get("baseMetricV3", {}).get("cvssV3", {}).get("baseSeverity", {})
            publishedDate = single_dict.get("publishedDate", {})
            lastModifiedDate = single_dict.get("lastModifiedDate", {})
            dataTuple = tuple((ID, str(baseSeverity), publishedDate, lastModifiedDate))
            allDataListTuple.append(dataTuple)

            for cpe23Uri_dict_list in single_dict.get("configurations", {}).get("nodes"):
                cpe23Uri_all_dict = cpe23Uri_dict_list.get("cpe_match", {})
                for cpe23Uri_dict in cpe23Uri_all_dict:
                    if len(cpe23Uri_dict) != 0:
                        # "cpe23Uri" : "cpe:2.3:o:juniper:junos:12.1x46:d10:*:*:*:*:*:*",
                        vendor_name = cpe23Uri_dict["cpe23Uri"].split(":")[3] # vendor_name: position [3] based on the delimiter (:) position
                        product_name = cpe23Uri_dict["cpe23Uri"].split(":")[4]
                        version_value = cpe23Uri_dict["cpe23Uri"].split(":")[5]
                        vendorTuple = tuple((ID, vendor_name, product_name, version_value))
                        allVendorDataListTuple.append(vendorTuple)
    else:
        print("This is not the expected JSON file!")
        allDataListTuple = False
        allVendorDataListTuple = False
    return allDataListTuple, allVendorDataListTuple


# Load and extract the JSON file and return the data structure (if this is not a JSON file then print appropriate message)
def extract(data_file: Any) -> Dict:
    data_file = DATA / data_file
    try: 
        if os.stat(data_file).st_size == 0:
            print("This file (File Name: ", data_file.name,") is an empty file!")
            return False
        else:
            try:
                data = open(data_file)
                data_dict = json.load(data)
                return data_dict
            except ValueError:
                print("This file (File Name: ", data_file.name,") is not a JSON file!")
                return False
    except OSError:
        print("This file (File Name: ", data_file.name,") doesn't exist!")
        return False
            

if __name__ == "__main__":
    pass