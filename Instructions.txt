Fortinet Technologies (Canada) Inc.
Software Development QA Engineer
Instructions for the Off-site Written Interview

April 2022


Introduction

The successful candidates for the open position of Software Development QA
Engineer will take on various tasks, including:

    - Manual system-level product testing
    - Setting up test environments
    - Reproducing customer-reported issues
    - Learning and understanding of various networking protocols
    - Developing new automated test systems
    - Maintaining existing automated test systems

Preference will be given to candidates with knowledge of three or more of the 
following technical skills:

    - Network administration (TCP/IP, NAT, IPsec VPN, SSL, IPv4, IPv6, packet
      capture and reading, etc)
    - Network security (antivirus, sandboxing, intrusion prevention (IPS), VPN,
      web filtering, vulnerability analysis, etc)
    - Operating systems (Windows, Mac OS X, Linux), virtual machines
    - Fortinet products (FortiGate, FortiAnalyzer, FortiSandbox, FortiClient, 
      etc), or similar competitor products
    - Databases - use and administration (MS SQL, SQLite, MySQL, PostgreSQL, etc)
    - Scripting languages (Python, Perl, Ruby, etc)

These written interview questions focus on exploring the candidates knowledge of
scripting languages used for some of our automated test systems.

This is an open-book test. A list of resources is provided towards the end of
this document. You are encouraged to make good use of them. The on-site
interview will ask questions that allow each candidate the opportunity to
demonstrate their level of knowledge in the same area.


Structure of the Test Questions

This test places the candidate in a situation similar to what the team handles
regularly. The NIST organisation provides a data feed of publicly announced
software vulnerabilities on their website: https://nvd.nist.gov/vuln/data-feeds
The team is tasked with extracting this information on a regular basis.

The preferred scripting language is Python. You may however write in
any other scripting language available on Microsoft Windows or Linux, such as
Perl, Ruby, Tcl, etc.

The following the directory structure is one way to present your solution:

    nvd
      |
      --- download # contains files downloaded from the internet for the task
      |
      --- lib      # Perl or Python modules created for this task
      |
      --- log      # any log messages generated by the scripts may be saved here
      |
      --- scripts  # top level scripts for this task

If there is a module in the lib directory, it may be used by any script in 
scripts directory. One of the JSON files provided by the NIST feed is saved into
the download directory.


Suggested Python Modules

Python from www.python.org is recommended for
Microsoft Windows. Python is usually installed by default on regular Linux
desktops. Use the latest downloadable stable version of Python.

Some of the following Python modules may come in handy:

    - pprint       # Python core module used for introspection (along with vars)
    - vars()       # Python core function for introspection (along with pprint)
    - os           # os.path.abspath() and os.path.dirname() may be used to find
                   # The directory of the currently running script
    - json         # Standard Python module
    - urllib       # Package for working with URLs 
    - requests     # Simple HTTP library


Python Documentation

Here are some useful Python documents:

    - Python programming landing page
      https://www.python.org/

    - PyPI - Python Package Index
      https://pypi.python.org/

    - json module manual page
      https://docs.python.org/3/library/json.html

    - pprint manual page
      https://docs.python.org/3/library/pprint.html

    - urllib
      https://docs.python.org/3/library/urllib.html

    - requests module page
      https://docs.python-requests.org/en/latest/

    - MySQLdb
      https://pypi.org/project/MySQL-python/

    - psycopg2
      https://pypi.org/project/psycopg2/

    - PyGreSQL
      https://pypi.org/project/PyGreSQL/

    - pysqlite
      https://pypi.org/project/pysqlite/

Python provides module documentation as pydoc. If a module is installed, the
documentation can be accessed using:

    pydoc <module_name>
    pydoc pprint

where <module_name> is the name of the module. An example for pprint is
provided.

Some of the modules listed above use some complex Python data structures.
The following Python documentation may be useful:

    - Python dictionary objects
      https://docs.python.org/3/tutorial/datastructures.html#dictionaries
      https://docs.python.org/3/library/stdtypes.html#mapping-types-dict

    - Python Object-Oriented Programming
      https://docs.python.org/3/tutorial/classes.html
      This is not required for this task. But may be useful for understanding
      how to use some of the modules (json, pprint, urllib, etc)

    - Python debugging tutorial
      https://docs.python.org/3/library/pdb.html
      Very helpful for debugging Python scripts and modules. Otherwise, not
      required for this task.


Suggested Perl Modules

Perl is usually installed by default on regular Linux desktops. For Microsoft
Windows, ActiveState Perl is recommended: http://www.activestate.com/activeperl

The following Perl modules could be used:

    - strict       # this is a standard Perl module. It is always installed.
    - warning      # same as strict, this is a standard Perl module
    - Dumpvalue    # Perl core module used for introspection
    - FindBin      # should also always be available if Perl is installed

    - JSON         # needs to be installed
    - JSON::XS     # needs to be installed. Could be used instead of, or alongside JSON


Perl Documentation

Here are some useful Perl documents:

    - Perl programming landing page
      https://www.perl.org/

    - CPAN - Perl module pages
      http://search.cpan.org
      https://metacpan.org/

    - JSON::XS documentation
      https://metacpan.org/pod/JSON::XS
      the Perl module for JSON

    - Dumpvalue manual page
      http://perldoc.perl.org/Dumpvalue.html

    - DBI
      http://dbi.perl.org/
      https://metacpan.org/pod/DBI

    - LWP
      https://metacpan.org/pod/LWP
      WWW library for Perl

Perl provides module documentation as Perldoc. If a module is installed, the
documentation can be accessed using:

    perldoc <module_name>
    perldoc FindBin

where <module_name> is the name of the module. An example for FindBin is
provided.

Some of the modules listed above use some not-so-common Perl data structures.
The following Perl documentation may be useful:

    - Perl references tutorials
      http://perldoc.perl.org/perlreftut.html
      http://perldoc.perl.org/perlref.html

    - Perl Object-Oriented Programming
      http://perldoc.perl.org/perlootut.html
      This is not required for this task. But may be useful for understanding
      how to use some of the external modules (JSON, Dumpvalue, DBI, LWP)

    - Perl debugging tutorial
      http://perldoc.perl.org/perldebtut.html
      Very helpful for debugging Perl scripts and modules. Otherwise, not
      required for this task.

    - Package
      https://perldoc.perl.org/functions/package.html


Most of the common Perl or Python modules can be installed on Linux using yum, 
dnf or apt-get. On Microsoft Windows, ppm (for Perl), pypm (for Python) install
most modules.


Relational Database Documentation

The team uses both MySQL and SQLite. Candidate may choose to use either. May
also use any other relational database.

MySQL documentation home is at: http://dev.mysql.com/doc/. An installation of
MySQL server will be useful for testing.

SQLite documentation is available at http://www.sqlite.org/. There is no need
for a database server. This is one advantage of SQLite over other relational
database systems.

The Python DB API (PEP 249 - https://wiki.python.org/moin/DatabaseProgramming/)
provides a specification for database drivers in Python for use with various
relational databases. Module implementations that follow this specification
include:

    - MySQLdb - for MySQL
    - psycopg2, PyGreSQL - for PostgreSQL
    - pysqlite - for SQLite

The Perl DBI module is often used for database implementations from Perl scripts
and modules. It presents a consistent interface to Perl applications,
irrespective of the underlying relational database server. A tutorial is
available at: http://www.mysqltutorial.org/perl-mysql/
Other than the difference in how the connect() method is called, most of the
tutorial will apply to other database servers, such as SQLite or PostgreSQL.
The module documentation listed earlier is very detailed and useful.


User Agent

When connecting to a web page, it is common to present the script as a User
Agent. This makes it appear like a web browser to the web server. The Python 
urllib/requests or Perl LWP module may be helpful. Each allows the script to,
among others, do:

    - visit a web site
    - retrieve any page on the site
    - download file(s)
    - submit web forms
    - maintain and send cookies
    - error reports and control


Turning in your work

Place all work, downloaded files and logs in the working directory provided.
Retain the directory structure. Here is the suggested final directory layout:

    <candidate_name>
        |
        ---    nvd
           |
           --- download
           |
           --- lib
           |
           --- log
           |
           --- scripts

where <candidate_name> is the candidate's full name without spaces or special
characters. If you need any new directories, create them under nvd, at the same
level as lib and scripts.

It will be helpful to create Answers.txt under the nvd directory. At the start 
of the file, provide the list of modules that is not part of a standard 
installation needed to start your script. After this, you can provide a short 
summary of your response to each of the items in Questions.txt. 

When all is done, compress the top level directory: <candidate_name> with the
appropriate extension: .zip or .gz. Submit the compressed file back to Fortinet.
If you find that the compressed file is too large to send by e-mail, you may
upload it to a shared drive like Dropbox or Google Drive, and send information
on how to retrieve it. You may also remove the download and log directories from
the directory structure before compressing it and sending by e-mail. These two
are likely to be the largest directories by size.


Comments and Feedback

If you run into issues, create a plain text file in the top level directory of
your submission, at the same level as nvd, to explain how you addressed them.




Good luck!

