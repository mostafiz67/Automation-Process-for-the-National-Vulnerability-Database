Fortinet Technologies (Canada) Inc.
Software Development QA Engineer
Written Interview Questions

April 2022


Instructions

Read the document: Instructions.txt before starting the questions.


Q1.  Create a new module - NVD.py, NVD.pm or NVD.rb (the file extension depends
     on the scripting language). Implement a function: extract() as follows:

         - it accepts a single, plain text NVD JSON file (such as 
           nvdcve-1.0-2018.json in the download directory)

         - it reads the content into memory

         - it converts the data into a data structure in the current scripting 
           language (Python, Perl, Ruby, etc).

           The new data structure is usually a hash or dictionary, which may 
           contain nested data - scalar, arrays or lists, hashes or 
           dictionaries.

         - returns the converted data

     New private functions may be added into the NVD module and called as
     required.


Q2.  Create a script - nvd_extract (which may have a file extension: .py, .pl
     or .rb, depending on the scripting language). Implement as follows:

         - it prints basic usage information if called with no arguments

         - it imports the module - NVD, created above

         - it accepts one or more NVD JSON files from the command line

         - it calls the function extract() from the imported NVD module for
           each JSON file passed it

         - may it be huge data or small, it prints the data returned by extract() to STDOUT for each file


Q3.  Download NVD JSON files from the NIST feed for the years 2017 to 2020.
     Either the .zip or .gz files may be downloaded. Extract the downloaded 
     files into the download directory.

     The JSON file for year 2021 is already in the download directory.

     Run the script created in Q2 above on the files downloaded.


Q4.  When calling NVD extract(), determine what may occur in each of the
     following cases:

	- it is called with an empty file

	- it is called with a non-empty file that is not a JSON file

	- it is called with a file that does not exist


     Modify the NVD module to handle any issues observed above, such that
     it will continue or exit gracefully.

     Provide the minimal changes required to correct any issues observed above
     in the top-level script: nvd_extract. In the case multiple NVD JSON files 
     are provided as input, the script should print an error or warning as 
     appropriate, but continue with the other input files where possible.


Q5.  The output of the script: nvd_extract includes various fields used as
     JSON elements in the original NVD JSON file. It is intended to extract and
     save the following fields for each entry found into a database:

        ID - CVE_Item > cve > CVE_data_meta > ID
        baseSeverity - CVE_Item > impact > baseMetricV3 > cvssV3 > baseSeverity; use baseMetricV2 if baseMetricV3 is not available
        publishedDate
        lastModifiedDate

     Write a SQL command that could be used to make a new database table, which
     will contain records for all entries extracted.

     For this task, we assume the ID field is always unique.


Q6.  Write a new function in NVD named save2db() that:

        - accepts the output of NVD extract(), and the connection information
          to a database

        - connects to the database specified

        - makes a new database table as above

        - for each entry record in the output received from NVD extract(), save
          the fields listed in Q5 above to the database

     New private functions may be added in NVD and called as required.

     You may use any relational database server: MySQL, PostgreSQL, SQLite, etc.

     Any of the Python DB API modules: MySQLdb, psycopg2, PyGreSQL or pysqlite
     may be useful for this purpose. If writing with Perl, you may find the Perl
     DBI module helpful.


Q7.  Write a simple script called vuln2db similar to nvd_extract. It should
     accept any number of NVD JSON files. For each given JSON file, it should
     call NVD extract(), and the new NVD save2db() function created in
     Q6, to save all the entries into a database.

     You may provide the database connection information as an input to the new
     script, or as variables inside the script.





BONUS Questions

The following questions are optional. BQ3 depends on (could only be attempted
if you answered) BQ2. Other than that, you may skip (or answer) any or all
questions.


BQ1. Modify NVD save2db() to create a second table, with the following:

        ID
        vendor_name
        product_name
        version_value

     Add an autoincrement column as a unique field for each row. The ID will still 
     be CVE ID. The vendor_name, product_name and version_value will come from 
     configurations > nodes > cpe_match > cpe23Uri.

        https://nvd.nist.gov/products/cpe

     For each entry record in the output of NVD extract(), as provided to
     NVD save2db(), it should still save records to the first table created in
     Q6. It should also save the vendor_name, product_name and version_value,
     along with the CVE ID, into the new table.

     Note that for each CVE ID, there may be:

         - one vendor_name with multiple product_name
           see for instance: CVE-2018-0512, CVE-2018-0742 in the 2018 JSON file

         - multiple vendor_name, each with one or more product_name.
           see for instance: CVE-2018-1054, CVE-2018-1304 in the 2018 JSON file

         - multiple version_value for one product_name


BQ2. Create a new function: update() in the NVD module. It should:

         - visit the NIST feed web site: https://nvd.nist.gov/vuln/data-feeds

         - as for Q3 above, download the NVD JSON files from the NIST feed 
           for the years 2017 to 2021. Decompress the downloaded files into 
           the download directory.

         - read the respective timestamp(s) in the column called "Updated" 
           from the JSON Feeds table on the NIST feed web site.

           save these timestamp(s) into a plain text file, called 
           last_update.txt in the downloads directory.

           Note: an alternative is to simply save the current timestamp into
           last_update.txt.

         - call extract(), followed by save2db() for each NVD JSON file 
           downloaded to insert records into the database.

     At this point, the new function, update() returns (or exits gracefully).
     Now, if the function is called again, it should repeat the process above,
     but with the following modification:

         - read the saved timestamp(s) from last_update.txt in the downloads
           directory.

         - visit the NIST feed web site: https://nvd.nist.gov/vuln/data-feeds

         - read the "Updated" column of the JSON Feeds table (on the web site)

           if the Updated column has a timestamp that is newer for any of the 
           files downloaded in Q3 above, the said file has since been modified.

         - download any such modified file, decompress it, and call extract(),
           followed by save2db() to update the database. 

         - save the new timestamps to the same plain text file, last_update.txt
           in the downloads directory.

           May want to keep one backup copy of last_update.txt

     Create a simple script, similar to nvd_extract, vuln2db, that imports the
     NVD module and calls the update() function.

     Run the new script every hour (or so), manually or in an automatic 
     schedule to see what it does.


BQ3. Add documentation, processing logs, as well as error checking and handling,
     to the new function: update() created in BQ2 above.

